data
distribution
task
scheduling
distributed
computing
comparison
studied
sets
thesis
developed
scalable
framework
programming
model
strategies
policies
solve
study
considered
storage
usage
locality
load
balancing
performance
improvement
solving
outcomes
applied
bioinformatics
biometrics
mining
domains
comparisons
typical
pattern
efficient
represent
class
processing
application
achieve
phase
environment
existing
hadoop
designed
mapreduce
tasks
result
huge
amount
runtime
executed
addressing
strategy
paper
mind
saves
space
time
achieves
experiments
conducted
demonstrate
approaches
ideal
capacity
multiple
machines
achieved
approach
computation
size
growing
rapidly
affect
system
greatly
embedded
reduced
balanced
effectiveness
heterogeneous
systems
requirement
atac
increasingly
solutions
inefficient
exhibit
poor
unbalanced
allocation
massive
movement
utilization
resources
address
examples
applications
previous
efforts
implement
frameworks
treated
phases
separately
leads
demands
creating
methods
homogeneous
environments
degraded
tackle
challenges
formulates
requirements
simultaneously
constrained
optimization
metaheuristic
dynamic
algorithmic
implementation
perfect
avoiding
rearrangement
nodes
enhancing
reduces
network
demonstrated
experimental
studies
simulated
annealing
including
computational
focus
allocating
careful
consideration
provide
users
simplicity
inherent
match
considers
savings
algorithm
